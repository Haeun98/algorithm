#include <iostream>
#include <algorithm>
using namespace std;

int N, normal = 0, disable=0;
int a[101][101];
bool check[101][101];
int dx[] = { -1,0,1,0 }, dy[] = { 0,1,0,-1 };

void dfs(int x, int y) {
	check[x][y] = true;
	for (int i = 0; i < 4; i++) {
		int nx = x + dx[i], ny = y + dy[i];
		if (nx < 0 || nx >= N || ny < 0 || ny >= N) continue;
		if (!check[nx][ny] && a[nx][ny]==a[x][y]) dfs(nx, ny);
	}
}

void dfsRG(int x, int y) {
	check[x][y] = true;
	for (int i = 0; i < 4; i++) {
		int nx = x + dx[i], ny = y + dy[i];
		if (nx < 0 || nx >= N || ny < 0 || ny >= N) continue;
		if (!check[nx][ny] && a[nx][ny] != 2) dfsRG(nx, ny);
	}
}

int main(void) {
	cin >> N;
	for (int i = 0; i < N; i++) {
		string s;
		cin >> s;
		for (int j = 0; j < N; j++) {
			if (s[j] == 'R') {
				a[i][j] = 0;
			}
			else if(s[j]=='G') {
				a[i][j] = 1;
			}
			else{
				a[i][j] = 2;
			}
		}
	}

	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			for (int k = 0; k < 3; k++) {
				if (!check[i][j] && a[i][j] == k) {
					dfs(i, j);
					normal++;
				}
			}
		}
	}

	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			check[i][j] = false;
		}
	}
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			if (!check[i][j] && a[i][j] == 2) {
				dfs(i, j);
				disable++;
			}
			else if (!check[i][j]) {
				dfsRG(i, j);
				disable++;
			}
		}
	}

	cout << normal << " "<< disable << "\n";
	return 0;
}
